import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.0.1
 * Query Engine version: 7d77a7cd570c9dedb4cdf31a1cbec615cf2e1eda
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export declare type TrueKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string, collectTimestamps?: any): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/


export type Datasources = {
  db?: string
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>

  /**
   * You probably don't want to use this. `__internal` is used by internal tooling.
   */
  __internal?: {
    debug?: boolean
    hooks?: Hooks
    engine?: {
      cwd?: string
      binaryPath?: string
    }
    measurePerformance?: boolean
  }
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]> 

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Stores
 * const stores = await prisma.store.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Stores
   * const stores = await prisma.store.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md).
   */
  constructor(optionsArg?: T);
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  connect(): Promise<void>;
  /**
   * @private
   */
  private runDisconnect;
  /**
   * Disconnect from the database
   */
  disconnect(): Promise<any>;

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.store`: Exposes CRUD operations for the **Store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.store.findMany()
    * ```
    */
  get store(): StoreDelegate;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): ItemDelegate;

  /**
   * `prisma.storesOnItems`: Exposes CRUD operations for the **StoresOnItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StoresOnItems
    * const storesOnItems = await prisma.storesOnItems.findMany()
    * ```
    */
  get storesOnItems(): StoresOnItemsDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const OrderByArg: {
  asc: 'asc',
  desc: 'desc'
};

export declare type OrderByArg = (typeof OrderByArg)[keyof typeof OrderByArg]



/**
 * Model Store
 */

export type Store = {
  coordinates: string | null
  date: Date
  id: number
  location: string | null
  storename: string
  amount: number
}

export type StoreSelect = {
  coordinates?: boolean
  date?: boolean
  id?: boolean
  location?: boolean
  storename?: boolean
  StoresOnItems?: boolean | FindManyStoresOnItemsArgs
  Item?: boolean | FindManyItemArgs
  amount?: boolean
}

export type StoreInclude = {
  StoresOnItems?: boolean | FindManyStoresOnItemsArgs
  Item?: boolean | FindManyItemArgs
}

export type StoreGetPayload<
  S extends boolean | null | undefined | StoreArgs,
  U = keyof S
> = S extends true
  ? Store
  : S extends undefined
  ? never
  : S extends StoreArgs | FindManyStoreArgs
  ? 'include' extends U
    ? Store  & {
      [P in TrueKeys<S['include']>]:
      P extends 'StoresOnItems'
      ? Array<StoresOnItemsGetPayload<S['include'][P]>> :
      P extends 'Item'
      ? Array<ItemGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Store ? Store[P]
: 
      P extends 'StoresOnItems'
      ? Array<StoresOnItemsGetPayload<S['select'][P]>> :
      P extends 'Item'
      ? Array<ItemGetPayload<S['select'][P]>> : never
    }
  : Store
: Store


export interface StoreDelegate {
  /**
   * Find zero or one Store.
   * @param {FindOneStoreArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneStoreArgs>(
    args: Subset<T, FindOneStoreArgs>
  ): CheckSelect<T, StoreClient<Store | null>, StoreClient<StoreGetPayload<T> | null>>
  /**
   * Find zero or more Stores.
   * @param {FindManyStoreArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Stores
   * const stores = await prisma.store.findMany()
   * 
   * // Get first 10 Stores
   * const stores = await prisma.store.findMany({ take: 10 })
   * 
   * // Only select the `coordinates`
   * const storeWithCoordinatesOnly = await prisma.store.findMany({ select: { coordinates: true } })
   * 
  **/
  findMany<T extends FindManyStoreArgs>(
    args?: Subset<T, FindManyStoreArgs>
  ): CheckSelect<T, Promise<Array<Store>>, Promise<Array<StoreGetPayload<T>>>>
  /**
   * Create a Store.
   * @param {StoreCreateArgs} args - Arguments to create a Store.
   * @example
   * // Create one Store
   * const user = await prisma.store.create({
   *   data: {
   *     // ... data to create a Store
   *   }
   * })
   * 
  **/
  create<T extends StoreCreateArgs>(
    args: Subset<T, StoreCreateArgs>
  ): CheckSelect<T, StoreClient<Store>, StoreClient<StoreGetPayload<T>>>
  /**
   * Delete a Store.
   * @param {StoreDeleteArgs} args - Arguments to delete one Store.
   * @example
   * // Delete one Store
   * const user = await prisma.store.delete({
   *   where: {
   *     // ... filter to delete one Store
   *   }
   * })
   * 
  **/
  delete<T extends StoreDeleteArgs>(
    args: Subset<T, StoreDeleteArgs>
  ): CheckSelect<T, StoreClient<Store>, StoreClient<StoreGetPayload<T>>>
  /**
   * Update one Store.
   * @param {StoreUpdateArgs} args - Arguments to update one Store.
   * @example
   * // Update one Store
   * const store = await prisma.store.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends StoreUpdateArgs>(
    args: Subset<T, StoreUpdateArgs>
  ): CheckSelect<T, StoreClient<Store>, StoreClient<StoreGetPayload<T>>>
  /**
   * Delete zero or more Stores.
   * @param {StoreDeleteManyArgs} args - Arguments to filter Stores to delete.
   * @example
   * // Delete a few Stores
   * const { count } = await prisma.store.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends StoreDeleteManyArgs>(
    args: Subset<T, StoreDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Stores.
   * @param {StoreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Stores
   * const store = await prisma.store.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends StoreUpdateManyArgs>(
    args: Subset<T, StoreUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Store.
   * @param {StoreUpsertArgs} args - Arguments to update or create a Store.
   * @example
   * // Update or create a Store
   * const store = await prisma.store.upsert({
   *   create: {
   *     // ... data to create a Store
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Store we want to update
   *   }
   * })
  **/
  upsert<T extends StoreUpsertArgs>(
    args: Subset<T, StoreUpsertArgs>
  ): CheckSelect<T, StoreClient<Store>, StoreClient<StoreGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyStoreArgs, 'select' | 'include'>): Promise<number>
}

export declare class StoreClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  StoresOnItems<T extends FindManyStoresOnItemsArgs = {}>(args?: Subset<T, FindManyStoresOnItemsArgs>): CheckSelect<T, Promise<Array<StoresOnItems>>, Promise<Array<StoresOnItemsGetPayload<T>>>>;

  Item<T extends FindManyItemArgs = {}>(args?: Subset<T, FindManyItemArgs>): CheckSelect<T, Promise<Array<Item>>, Promise<Array<ItemGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Store findOne
 */
export type FindOneStoreArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * Filter, which Store to fetch.
  **/
  where: StoreWhereUniqueInput
}


/**
 * Store findMany
 */
export type FindManyStoreArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * Filter, which Stores to fetch.
  **/
  where?: StoreWhereInput
  /**
   * Determine the order of the Stores to fetch.
  **/
  orderBy?: StoreOrderByInput
  /**
   * Sets the position for listing Stores.
  **/
  cursor?: StoreWhereUniqueInput
  /**
   * The number of Stores to fetch. If negative number, it will take Stores before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Stores.
  **/
  skip?: number
}


/**
 * Store create
 */
export type StoreCreateArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * The data needed to create a Store.
  **/
  data: StoreCreateInput
}


/**
 * Store update
 */
export type StoreUpdateArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * The data needed to update a Store.
  **/
  data: StoreUpdateInput
  /**
   * Choose, which Store to update.
  **/
  where: StoreWhereUniqueInput
}


/**
 * Store updateMany
 */
export type StoreUpdateManyArgs = {
  data: StoreUpdateManyMutationInput
  where?: StoreWhereInput
}


/**
 * Store upsert
 */
export type StoreUpsertArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * The filter to search for the Store to update in case it exists.
  **/
  where: StoreWhereUniqueInput
  /**
   * In case the Store found by the `where` argument doesn't exist, create a new Store with this data.
  **/
  create: StoreCreateInput
  /**
   * In case the Store was found with the provided `where` argument, update it with this data.
  **/
  update: StoreUpdateInput
}


/**
 * Store delete
 */
export type StoreDeleteArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * Filter which Store to delete.
  **/
  where: StoreWhereUniqueInput
}


/**
 * Store deleteMany
 */
export type StoreDeleteManyArgs = {
  where?: StoreWhereInput
}


/**
 * Store without action
 */
export type StoreArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
}



/**
 * Model Item
 */

export type Item = {
  id: number
  item: string
  number: string
}

export type ItemSelect = {
  id?: boolean
  item?: boolean
  number?: boolean
  StoresOnItems?: boolean | FindManyStoresOnItemsArgs
  Store?: boolean | FindManyStoreArgs
}

export type ItemInclude = {
  StoresOnItems?: boolean | FindManyStoresOnItemsArgs
  Store?: boolean | FindManyStoreArgs
}

export type ItemGetPayload<
  S extends boolean | null | undefined | ItemArgs,
  U = keyof S
> = S extends true
  ? Item
  : S extends undefined
  ? never
  : S extends ItemArgs | FindManyItemArgs
  ? 'include' extends U
    ? Item  & {
      [P in TrueKeys<S['include']>]:
      P extends 'StoresOnItems'
      ? Array<StoresOnItemsGetPayload<S['include'][P]>> :
      P extends 'Store'
      ? Array<StoreGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Item ? Item[P]
: 
      P extends 'StoresOnItems'
      ? Array<StoresOnItemsGetPayload<S['select'][P]>> :
      P extends 'Store'
      ? Array<StoreGetPayload<S['select'][P]>> : never
    }
  : Item
: Item


export interface ItemDelegate {
  /**
   * Find zero or one Item.
   * @param {FindOneItemArgs} args - Arguments to find a Item
   * @example
   * // Get one Item
   * const item = await prisma.item.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneItemArgs>(
    args: Subset<T, FindOneItemArgs>
  ): CheckSelect<T, ItemClient<Item | null>, ItemClient<ItemGetPayload<T> | null>>
  /**
   * Find zero or more Items.
   * @param {FindManyItemArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Items
   * const items = await prisma.item.findMany()
   * 
   * // Get first 10 Items
   * const items = await prisma.item.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyItemArgs>(
    args?: Subset<T, FindManyItemArgs>
  ): CheckSelect<T, Promise<Array<Item>>, Promise<Array<ItemGetPayload<T>>>>
  /**
   * Create a Item.
   * @param {ItemCreateArgs} args - Arguments to create a Item.
   * @example
   * // Create one Item
   * const user = await prisma.item.create({
   *   data: {
   *     // ... data to create a Item
   *   }
   * })
   * 
  **/
  create<T extends ItemCreateArgs>(
    args: Subset<T, ItemCreateArgs>
  ): CheckSelect<T, ItemClient<Item>, ItemClient<ItemGetPayload<T>>>
  /**
   * Delete a Item.
   * @param {ItemDeleteArgs} args - Arguments to delete one Item.
   * @example
   * // Delete one Item
   * const user = await prisma.item.delete({
   *   where: {
   *     // ... filter to delete one Item
   *   }
   * })
   * 
  **/
  delete<T extends ItemDeleteArgs>(
    args: Subset<T, ItemDeleteArgs>
  ): CheckSelect<T, ItemClient<Item>, ItemClient<ItemGetPayload<T>>>
  /**
   * Update one Item.
   * @param {ItemUpdateArgs} args - Arguments to update one Item.
   * @example
   * // Update one Item
   * const item = await prisma.item.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ItemUpdateArgs>(
    args: Subset<T, ItemUpdateArgs>
  ): CheckSelect<T, ItemClient<Item>, ItemClient<ItemGetPayload<T>>>
  /**
   * Delete zero or more Items.
   * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
   * @example
   * // Delete a few Items
   * const { count } = await prisma.item.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ItemDeleteManyArgs>(
    args: Subset<T, ItemDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Items.
   * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Items
   * const item = await prisma.item.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ItemUpdateManyArgs>(
    args: Subset<T, ItemUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Item.
   * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
   * @example
   * // Update or create a Item
   * const item = await prisma.item.upsert({
   *   create: {
   *     // ... data to create a Item
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Item we want to update
   *   }
   * })
  **/
  upsert<T extends ItemUpsertArgs>(
    args: Subset<T, ItemUpsertArgs>
  ): CheckSelect<T, ItemClient<Item>, ItemClient<ItemGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyItemArgs, 'select' | 'include'>): Promise<number>
}

export declare class ItemClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  StoresOnItems<T extends FindManyStoresOnItemsArgs = {}>(args?: Subset<T, FindManyStoresOnItemsArgs>): CheckSelect<T, Promise<Array<StoresOnItems>>, Promise<Array<StoresOnItemsGetPayload<T>>>>;

  Store<T extends FindManyStoreArgs = {}>(args?: Subset<T, FindManyStoreArgs>): CheckSelect<T, Promise<Array<Store>>, Promise<Array<StoreGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Item findOne
 */
export type FindOneItemArgs = {
  /**
   * Select specific fields to fetch from the Item
  **/
  select?: ItemSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ItemInclude | null
  /**
   * Filter, which Item to fetch.
  **/
  where: ItemWhereUniqueInput
}


/**
 * Item findMany
 */
export type FindManyItemArgs = {
  /**
   * Select specific fields to fetch from the Item
  **/
  select?: ItemSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ItemInclude | null
  /**
   * Filter, which Items to fetch.
  **/
  where?: ItemWhereInput
  /**
   * Determine the order of the Items to fetch.
  **/
  orderBy?: ItemOrderByInput
  /**
   * Sets the position for listing Items.
  **/
  cursor?: ItemWhereUniqueInput
  /**
   * The number of Items to fetch. If negative number, it will take Items before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Items.
  **/
  skip?: number
}


/**
 * Item create
 */
export type ItemCreateArgs = {
  /**
   * Select specific fields to fetch from the Item
  **/
  select?: ItemSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ItemInclude | null
  /**
   * The data needed to create a Item.
  **/
  data: ItemCreateInput
}


/**
 * Item update
 */
export type ItemUpdateArgs = {
  /**
   * Select specific fields to fetch from the Item
  **/
  select?: ItemSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ItemInclude | null
  /**
   * The data needed to update a Item.
  **/
  data: ItemUpdateInput
  /**
   * Choose, which Item to update.
  **/
  where: ItemWhereUniqueInput
}


/**
 * Item updateMany
 */
export type ItemUpdateManyArgs = {
  data: ItemUpdateManyMutationInput
  where?: ItemWhereInput
}


/**
 * Item upsert
 */
export type ItemUpsertArgs = {
  /**
   * Select specific fields to fetch from the Item
  **/
  select?: ItemSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ItemInclude | null
  /**
   * The filter to search for the Item to update in case it exists.
  **/
  where: ItemWhereUniqueInput
  /**
   * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
  **/
  create: ItemCreateInput
  /**
   * In case the Item was found with the provided `where` argument, update it with this data.
  **/
  update: ItemUpdateInput
}


/**
 * Item delete
 */
export type ItemDeleteArgs = {
  /**
   * Select specific fields to fetch from the Item
  **/
  select?: ItemSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ItemInclude | null
  /**
   * Filter which Item to delete.
  **/
  where: ItemWhereUniqueInput
}


/**
 * Item deleteMany
 */
export type ItemDeleteManyArgs = {
  where?: ItemWhereInput
}


/**
 * Item without action
 */
export type ItemArgs = {
  /**
   * Select specific fields to fetch from the Item
  **/
  select?: ItemSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ItemInclude | null
}



/**
 * Model StoresOnItems
 */

export type StoresOnItems = {
  itemId: number
  storeId: number
}

export type StoresOnItemsSelect = {
  itemId?: boolean
  storeId?: boolean
  Item?: boolean | ItemArgs
  Store?: boolean | StoreArgs
}

export type StoresOnItemsInclude = {
  Item?: boolean | ItemArgs
  Store?: boolean | StoreArgs
}

export type StoresOnItemsGetPayload<
  S extends boolean | null | undefined | StoresOnItemsArgs,
  U = keyof S
> = S extends true
  ? StoresOnItems
  : S extends undefined
  ? never
  : S extends StoresOnItemsArgs | FindManyStoresOnItemsArgs
  ? 'include' extends U
    ? StoresOnItems  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Item'
      ? ItemGetPayload<S['include'][P]> :
      P extends 'Store'
      ? StoreGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof StoresOnItems ? StoresOnItems[P]
: 
      P extends 'Item'
      ? ItemGetPayload<S['select'][P]> :
      P extends 'Store'
      ? StoreGetPayload<S['select'][P]> : never
    }
  : StoresOnItems
: StoresOnItems


export interface StoresOnItemsDelegate {
  /**
   * Find zero or one StoresOnItems.
   * @param {FindOneStoresOnItemsArgs} args - Arguments to find a StoresOnItems
   * @example
   * // Get one StoresOnItems
   * const storesOnItems = await prisma.storesOnItems.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneStoresOnItemsArgs>(
    args: Subset<T, FindOneStoresOnItemsArgs>
  ): CheckSelect<T, StoresOnItemsClient<StoresOnItems | null>, StoresOnItemsClient<StoresOnItemsGetPayload<T> | null>>
  /**
   * Find zero or more StoresOnItems.
   * @param {FindManyStoresOnItemsArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StoresOnItems
   * const storesOnItems = await prisma.storesOnItems.findMany()
   * 
   * // Get first 10 StoresOnItems
   * const storesOnItems = await prisma.storesOnItems.findMany({ take: 10 })
   * 
   * // Only select the `itemId`
   * const storesOnItemsWithItemIdOnly = await prisma.storesOnItems.findMany({ select: { itemId: true } })
   * 
  **/
  findMany<T extends FindManyStoresOnItemsArgs>(
    args?: Subset<T, FindManyStoresOnItemsArgs>
  ): CheckSelect<T, Promise<Array<StoresOnItems>>, Promise<Array<StoresOnItemsGetPayload<T>>>>
  /**
   * Create a StoresOnItems.
   * @param {StoresOnItemsCreateArgs} args - Arguments to create a StoresOnItems.
   * @example
   * // Create one StoresOnItems
   * const user = await prisma.storesOnItems.create({
   *   data: {
   *     // ... data to create a StoresOnItems
   *   }
   * })
   * 
  **/
  create<T extends StoresOnItemsCreateArgs>(
    args: Subset<T, StoresOnItemsCreateArgs>
  ): CheckSelect<T, StoresOnItemsClient<StoresOnItems>, StoresOnItemsClient<StoresOnItemsGetPayload<T>>>
  /**
   * Delete a StoresOnItems.
   * @param {StoresOnItemsDeleteArgs} args - Arguments to delete one StoresOnItems.
   * @example
   * // Delete one StoresOnItems
   * const user = await prisma.storesOnItems.delete({
   *   where: {
   *     // ... filter to delete one StoresOnItems
   *   }
   * })
   * 
  **/
  delete<T extends StoresOnItemsDeleteArgs>(
    args: Subset<T, StoresOnItemsDeleteArgs>
  ): CheckSelect<T, StoresOnItemsClient<StoresOnItems>, StoresOnItemsClient<StoresOnItemsGetPayload<T>>>
  /**
   * Update one StoresOnItems.
   * @param {StoresOnItemsUpdateArgs} args - Arguments to update one StoresOnItems.
   * @example
   * // Update one StoresOnItems
   * const storesOnItems = await prisma.storesOnItems.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends StoresOnItemsUpdateArgs>(
    args: Subset<T, StoresOnItemsUpdateArgs>
  ): CheckSelect<T, StoresOnItemsClient<StoresOnItems>, StoresOnItemsClient<StoresOnItemsGetPayload<T>>>
  /**
   * Delete zero or more StoresOnItems.
   * @param {StoresOnItemsDeleteManyArgs} args - Arguments to filter StoresOnItems to delete.
   * @example
   * // Delete a few StoresOnItems
   * const { count } = await prisma.storesOnItems.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends StoresOnItemsDeleteManyArgs>(
    args: Subset<T, StoresOnItemsDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more StoresOnItems.
   * @param {StoresOnItemsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StoresOnItems
   * const storesOnItems = await prisma.storesOnItems.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends StoresOnItemsUpdateManyArgs>(
    args: Subset<T, StoresOnItemsUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one StoresOnItems.
   * @param {StoresOnItemsUpsertArgs} args - Arguments to update or create a StoresOnItems.
   * @example
   * // Update or create a StoresOnItems
   * const storesOnItems = await prisma.storesOnItems.upsert({
   *   create: {
   *     // ... data to create a StoresOnItems
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StoresOnItems we want to update
   *   }
   * })
  **/
  upsert<T extends StoresOnItemsUpsertArgs>(
    args: Subset<T, StoresOnItemsUpsertArgs>
  ): CheckSelect<T, StoresOnItemsClient<StoresOnItems>, StoresOnItemsClient<StoresOnItemsGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyStoresOnItemsArgs, 'select' | 'include'>): Promise<number>
}

export declare class StoresOnItemsClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Item<T extends ItemArgs = {}>(args?: Subset<T, ItemArgs>): CheckSelect<T, ItemClient<Item | null>, ItemClient<ItemGetPayload<T> | null>>;

  Store<T extends StoreArgs = {}>(args?: Subset<T, StoreArgs>): CheckSelect<T, StoreClient<Store | null>, StoreClient<StoreGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * StoresOnItems findOne
 */
export type FindOneStoresOnItemsArgs = {
  /**
   * Select specific fields to fetch from the StoresOnItems
  **/
  select?: StoresOnItemsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoresOnItemsInclude | null
  /**
   * Filter, which StoresOnItems to fetch.
  **/
  where: StoresOnItemsWhereUniqueInput
}


/**
 * StoresOnItems findMany
 */
export type FindManyStoresOnItemsArgs = {
  /**
   * Select specific fields to fetch from the StoresOnItems
  **/
  select?: StoresOnItemsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoresOnItemsInclude | null
  /**
   * Filter, which StoresOnItems to fetch.
  **/
  where?: StoresOnItemsWhereInput
  /**
   * Determine the order of the StoresOnItems to fetch.
  **/
  orderBy?: StoresOnItemsOrderByInput
  /**
   * Sets the position for listing StoresOnItems.
  **/
  cursor?: StoresOnItemsWhereUniqueInput
  /**
   * The number of StoresOnItems to fetch. If negative number, it will take StoresOnItems before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` StoresOnItems.
  **/
  skip?: number
}


/**
 * StoresOnItems create
 */
export type StoresOnItemsCreateArgs = {
  /**
   * Select specific fields to fetch from the StoresOnItems
  **/
  select?: StoresOnItemsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoresOnItemsInclude | null
  /**
   * The data needed to create a StoresOnItems.
  **/
  data: StoresOnItemsCreateInput
}


/**
 * StoresOnItems update
 */
export type StoresOnItemsUpdateArgs = {
  /**
   * Select specific fields to fetch from the StoresOnItems
  **/
  select?: StoresOnItemsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoresOnItemsInclude | null
  /**
   * The data needed to update a StoresOnItems.
  **/
  data: StoresOnItemsUpdateInput
  /**
   * Choose, which StoresOnItems to update.
  **/
  where: StoresOnItemsWhereUniqueInput
}


/**
 * StoresOnItems updateMany
 */
export type StoresOnItemsUpdateManyArgs = {
  data: StoresOnItemsUpdateManyMutationInput
  where?: StoresOnItemsWhereInput
}


/**
 * StoresOnItems upsert
 */
export type StoresOnItemsUpsertArgs = {
  /**
   * Select specific fields to fetch from the StoresOnItems
  **/
  select?: StoresOnItemsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoresOnItemsInclude | null
  /**
   * The filter to search for the StoresOnItems to update in case it exists.
  **/
  where: StoresOnItemsWhereUniqueInput
  /**
   * In case the StoresOnItems found by the `where` argument doesn't exist, create a new StoresOnItems with this data.
  **/
  create: StoresOnItemsCreateInput
  /**
   * In case the StoresOnItems was found with the provided `where` argument, update it with this data.
  **/
  update: StoresOnItemsUpdateInput
}


/**
 * StoresOnItems delete
 */
export type StoresOnItemsDeleteArgs = {
  /**
   * Select specific fields to fetch from the StoresOnItems
  **/
  select?: StoresOnItemsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoresOnItemsInclude | null
  /**
   * Filter which StoresOnItems to delete.
  **/
  where: StoresOnItemsWhereUniqueInput
}


/**
 * StoresOnItems deleteMany
 */
export type StoresOnItemsDeleteManyArgs = {
  where?: StoresOnItemsWhereInput
}


/**
 * StoresOnItems without action
 */
export type StoresOnItemsArgs = {
  /**
   * Select specific fields to fetch from the StoresOnItems
  **/
  select?: StoresOnItemsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoresOnItemsInclude | null
}



/**
 * Deep Input Types
 */


export type ItemWhereInput = {
  id?: number | IntFilter
  item?: string | StringFilter
  number?: string | StringFilter
  StoresOnItems?: StoresOnItemsFilter | null
  Store?: StoreFilter | null
  AND?: Enumerable<ItemWhereInput>
  OR?: Array<ItemWhereInput>
  NOT?: Enumerable<ItemWhereInput>
}

export type StoresOnItemsWhereInput = {
  itemId?: number | IntFilter
  storeId?: number | IntFilter
  AND?: Enumerable<StoresOnItemsWhereInput>
  OR?: Array<StoresOnItemsWhereInput>
  NOT?: Enumerable<StoresOnItemsWhereInput>
  Item?: ItemWhereInput | null
  Store?: StoreWhereInput | null
}

export type StoreWhereInput = {
  coordinates?: string | NullableStringFilter | null
  date?: Date | string | DateTimeFilter
  id?: number | IntFilter
  location?: string | NullableStringFilter | null
  storename?: string | StringFilter
  StoresOnItems?: StoresOnItemsFilter | null
  Item?: ItemFilter | null
  amount?: number | IntFilter
  AND?: Enumerable<StoreWhereInput>
  OR?: Array<StoreWhereInput>
  NOT?: Enumerable<StoreWhereInput>
}

export type StoreWhereUniqueInput = {
  id?: number
}

export type StoreIdItemIdCompoundUniqueInput = {
  storeId: number
  itemId: number
}

export type StoresOnItemsWhereUniqueInput = {
  storeId_itemId?: StoreIdItemIdCompoundUniqueInput
}

export type ItemWhereUniqueInput = {
  id?: number
}

export type StoreCreateWithoutItemInput = {
  coordinates?: string | null
  date: Date | string
  location?: string | null
  storename: string
  amount?: number
  StoresOnItems?: StoresOnItemsCreateManyWithoutStoreInput | null
}

export type StoreCreateManyWithoutItemInput = {
  create?: Enumerable<StoreCreateWithoutItemInput>
  connect?: Enumerable<StoreWhereUniqueInput>
}

export type ItemCreateWithoutStoresOnItemsInput = {
  item: string
  number: string
  Store?: StoreCreateManyWithoutItemInput | null
}

export type ItemCreateOneWithoutStoresOnItemsInput = {
  create?: ItemCreateWithoutStoresOnItemsInput
  connect?: ItemWhereUniqueInput
}

export type StoresOnItemsCreateWithoutStoreInput = {
  Item: ItemCreateOneWithoutStoresOnItemsInput
}

export type StoresOnItemsCreateManyWithoutStoreInput = {
  create?: Enumerable<StoresOnItemsCreateWithoutStoreInput>
  connect?: Enumerable<StoresOnItemsWhereUniqueInput>
}

export type StoreCreateWithoutStoresOnItemsInput = {
  coordinates?: string | null
  date: Date | string
  location?: string | null
  storename: string
  amount?: number
  Item?: ItemCreateManyWithoutStoreInput | null
}

export type StoreCreateOneWithoutStoresOnItemsInput = {
  create?: StoreCreateWithoutStoresOnItemsInput
  connect?: StoreWhereUniqueInput
}

export type StoresOnItemsCreateWithoutItemInput = {
  Store: StoreCreateOneWithoutStoresOnItemsInput
}

export type StoresOnItemsCreateManyWithoutItemInput = {
  create?: Enumerable<StoresOnItemsCreateWithoutItemInput>
  connect?: Enumerable<StoresOnItemsWhereUniqueInput>
}

export type ItemCreateWithoutStoreInput = {
  item: string
  number: string
  StoresOnItems?: StoresOnItemsCreateManyWithoutItemInput | null
}

export type ItemCreateManyWithoutStoreInput = {
  create?: Enumerable<ItemCreateWithoutStoreInput>
  connect?: Enumerable<ItemWhereUniqueInput>
}

export type StoreCreateInput = {
  coordinates?: string | null
  date: Date | string
  location?: string | null
  storename: string
  amount?: number
  StoresOnItems?: StoresOnItemsCreateManyWithoutStoreInput | null
  Item?: ItemCreateManyWithoutStoreInput | null
}

export type StoreUpdateWithoutItemDataInput = {
  coordinates?: string | null
  date?: Date | string
  id?: number
  location?: string | null
  storename?: string
  amount?: number
  StoresOnItems?: StoresOnItemsUpdateManyWithoutStoreInput
}

export type StoreUpdateWithWhereUniqueWithoutItemInput = {
  where: StoreWhereUniqueInput
  data: StoreUpdateWithoutItemDataInput
}

export type StoreScalarWhereInput = {
  coordinates?: string | NullableStringFilter | null
  date?: Date | string | DateTimeFilter
  id?: number | IntFilter
  location?: string | NullableStringFilter | null
  storename?: string | StringFilter
  StoresOnItems?: StoresOnItemsFilter | null
  Item?: ItemFilter | null
  amount?: number | IntFilter
  AND?: Enumerable<StoreScalarWhereInput>
  OR?: Array<StoreScalarWhereInput>
  NOT?: Enumerable<StoreScalarWhereInput>
}

export type StoreUpdateManyDataInput = {
  coordinates?: string | null
  date?: Date | string
  id?: number
  location?: string | null
  storename?: string
  amount?: number
}

export type StoreUpdateManyWithWhereNestedInput = {
  where: StoreScalarWhereInput
  data: StoreUpdateManyDataInput
}

export type StoreUpsertWithWhereUniqueWithoutItemInput = {
  where: StoreWhereUniqueInput
  update: StoreUpdateWithoutItemDataInput
  create: StoreCreateWithoutItemInput
}

export type StoreUpdateManyWithoutItemInput = {
  create?: Enumerable<StoreCreateWithoutItemInput>
  connect?: Enumerable<StoreWhereUniqueInput>
  set?: Enumerable<StoreWhereUniqueInput>
  disconnect?: Enumerable<StoreWhereUniqueInput>
  delete?: Enumerable<StoreWhereUniqueInput>
  update?: Enumerable<StoreUpdateWithWhereUniqueWithoutItemInput>
  updateMany?: Enumerable<StoreUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<StoreScalarWhereInput>
  upsert?: Enumerable<StoreUpsertWithWhereUniqueWithoutItemInput>
}

export type ItemUpdateWithoutStoresOnItemsDataInput = {
  id?: number
  item?: string
  number?: string
  Store?: StoreUpdateManyWithoutItemInput
}

export type ItemUpsertWithoutStoresOnItemsInput = {
  update: ItemUpdateWithoutStoresOnItemsDataInput
  create: ItemCreateWithoutStoresOnItemsInput
}

export type ItemUpdateOneRequiredWithoutStoresOnItemsInput = {
  create?: ItemCreateWithoutStoresOnItemsInput
  connect?: ItemWhereUniqueInput
  update?: ItemUpdateWithoutStoresOnItemsDataInput
  upsert?: ItemUpsertWithoutStoresOnItemsInput
}

export type StoresOnItemsUpdateWithoutStoreDataInput = {
  Item?: ItemUpdateOneRequiredWithoutStoresOnItemsInput
}

export type StoresOnItemsUpdateWithWhereUniqueWithoutStoreInput = {
  where: StoresOnItemsWhereUniqueInput
  data: StoresOnItemsUpdateWithoutStoreDataInput
}

export type StoresOnItemsScalarWhereInput = {
  itemId?: number | IntFilter
  storeId?: number | IntFilter
  AND?: Enumerable<StoresOnItemsScalarWhereInput>
  OR?: Array<StoresOnItemsScalarWhereInput>
  NOT?: Enumerable<StoresOnItemsScalarWhereInput>
}

export type StoresOnItemsUpdateManyDataInput = {

}

export type StoresOnItemsUpdateManyWithWhereNestedInput = {
  where: StoresOnItemsScalarWhereInput
  data: StoresOnItemsUpdateManyDataInput
}

export type StoresOnItemsUpsertWithWhereUniqueWithoutStoreInput = {
  where: StoresOnItemsWhereUniqueInput
  update: StoresOnItemsUpdateWithoutStoreDataInput
  create: StoresOnItemsCreateWithoutStoreInput
}

export type StoresOnItemsUpdateManyWithoutStoreInput = {
  create?: Enumerable<StoresOnItemsCreateWithoutStoreInput>
  connect?: Enumerable<StoresOnItemsWhereUniqueInput>
  set?: Enumerable<StoresOnItemsWhereUniqueInput>
  disconnect?: Enumerable<StoresOnItemsWhereUniqueInput>
  delete?: Enumerable<StoresOnItemsWhereUniqueInput>
  update?: Enumerable<StoresOnItemsUpdateWithWhereUniqueWithoutStoreInput>
  updateMany?: Enumerable<StoresOnItemsUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<StoresOnItemsScalarWhereInput>
  upsert?: Enumerable<StoresOnItemsUpsertWithWhereUniqueWithoutStoreInput>
}

export type StoreUpdateWithoutStoresOnItemsDataInput = {
  coordinates?: string | null
  date?: Date | string
  id?: number
  location?: string | null
  storename?: string
  amount?: number
  Item?: ItemUpdateManyWithoutStoreInput
}

export type StoreUpsertWithoutStoresOnItemsInput = {
  update: StoreUpdateWithoutStoresOnItemsDataInput
  create: StoreCreateWithoutStoresOnItemsInput
}

export type StoreUpdateOneRequiredWithoutStoresOnItemsInput = {
  create?: StoreCreateWithoutStoresOnItemsInput
  connect?: StoreWhereUniqueInput
  update?: StoreUpdateWithoutStoresOnItemsDataInput
  upsert?: StoreUpsertWithoutStoresOnItemsInput
}

export type StoresOnItemsUpdateWithoutItemDataInput = {
  Store?: StoreUpdateOneRequiredWithoutStoresOnItemsInput
}

export type StoresOnItemsUpdateWithWhereUniqueWithoutItemInput = {
  where: StoresOnItemsWhereUniqueInput
  data: StoresOnItemsUpdateWithoutItemDataInput
}

export type StoresOnItemsUpsertWithWhereUniqueWithoutItemInput = {
  where: StoresOnItemsWhereUniqueInput
  update: StoresOnItemsUpdateWithoutItemDataInput
  create: StoresOnItemsCreateWithoutItemInput
}

export type StoresOnItemsUpdateManyWithoutItemInput = {
  create?: Enumerable<StoresOnItemsCreateWithoutItemInput>
  connect?: Enumerable<StoresOnItemsWhereUniqueInput>
  set?: Enumerable<StoresOnItemsWhereUniqueInput>
  disconnect?: Enumerable<StoresOnItemsWhereUniqueInput>
  delete?: Enumerable<StoresOnItemsWhereUniqueInput>
  update?: Enumerable<StoresOnItemsUpdateWithWhereUniqueWithoutItemInput>
  updateMany?: Enumerable<StoresOnItemsUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<StoresOnItemsScalarWhereInput>
  upsert?: Enumerable<StoresOnItemsUpsertWithWhereUniqueWithoutItemInput>
}

export type ItemUpdateWithoutStoreDataInput = {
  id?: number
  item?: string
  number?: string
  StoresOnItems?: StoresOnItemsUpdateManyWithoutItemInput
}

export type ItemUpdateWithWhereUniqueWithoutStoreInput = {
  where: ItemWhereUniqueInput
  data: ItemUpdateWithoutStoreDataInput
}

export type ItemScalarWhereInput = {
  id?: number | IntFilter
  item?: string | StringFilter
  number?: string | StringFilter
  StoresOnItems?: StoresOnItemsFilter | null
  Store?: StoreFilter | null
  AND?: Enumerable<ItemScalarWhereInput>
  OR?: Array<ItemScalarWhereInput>
  NOT?: Enumerable<ItemScalarWhereInput>
}

export type ItemUpdateManyDataInput = {
  id?: number
  item?: string
  number?: string
}

export type ItemUpdateManyWithWhereNestedInput = {
  where: ItemScalarWhereInput
  data: ItemUpdateManyDataInput
}

export type ItemUpsertWithWhereUniqueWithoutStoreInput = {
  where: ItemWhereUniqueInput
  update: ItemUpdateWithoutStoreDataInput
  create: ItemCreateWithoutStoreInput
}

export type ItemUpdateManyWithoutStoreInput = {
  create?: Enumerable<ItemCreateWithoutStoreInput>
  connect?: Enumerable<ItemWhereUniqueInput>
  set?: Enumerable<ItemWhereUniqueInput>
  disconnect?: Enumerable<ItemWhereUniqueInput>
  delete?: Enumerable<ItemWhereUniqueInput>
  update?: Enumerable<ItemUpdateWithWhereUniqueWithoutStoreInput>
  updateMany?: Enumerable<ItemUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<ItemScalarWhereInput>
  upsert?: Enumerable<ItemUpsertWithWhereUniqueWithoutStoreInput>
}

export type StoreUpdateInput = {
  coordinates?: string | null
  date?: Date | string
  id?: number
  location?: string | null
  storename?: string
  amount?: number
  StoresOnItems?: StoresOnItemsUpdateManyWithoutStoreInput
  Item?: ItemUpdateManyWithoutStoreInput
}

export type StoreUpdateManyMutationInput = {
  coordinates?: string | null
  date?: Date | string
  id?: number
  location?: string | null
  storename?: string
  amount?: number
}

export type ItemCreateInput = {
  item: string
  number: string
  StoresOnItems?: StoresOnItemsCreateManyWithoutItemInput | null
  Store?: StoreCreateManyWithoutItemInput | null
}

export type ItemUpdateInput = {
  id?: number
  item?: string
  number?: string
  StoresOnItems?: StoresOnItemsUpdateManyWithoutItemInput
  Store?: StoreUpdateManyWithoutItemInput
}

export type ItemUpdateManyMutationInput = {
  id?: number
  item?: string
  number?: string
}

export type StoresOnItemsCreateInput = {
  Item: ItemCreateOneWithoutStoresOnItemsInput
  Store: StoreCreateOneWithoutStoresOnItemsInput
}

export type StoresOnItemsUpdateInput = {
  Item?: ItemUpdateOneRequiredWithoutStoresOnItemsInput
  Store?: StoreUpdateOneRequiredWithoutStoresOnItemsInput
}

export type StoresOnItemsUpdateManyMutationInput = {

}

export type IntFilter = {
  equals?: number
  not?: number | IntFilter
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
}

export type StringFilter = {
  equals?: string
  not?: string | StringFilter
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
}

export type StoresOnItemsFilter = {
  every?: StoresOnItemsWhereInput
  some?: StoresOnItemsWhereInput
  none?: StoresOnItemsWhereInput
}

export type StoreFilter = {
  every?: StoreWhereInput
  some?: StoreWhereInput
  none?: StoreWhereInput
}

export type NullableStringFilter = {
  equals?: string | null
  not?: string | null | NullableStringFilter
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
}

export type DateTimeFilter = {
  equals?: Date | string
  not?: Date | string | DateTimeFilter
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
}

export type ItemFilter = {
  every?: ItemWhereInput
  some?: ItemWhereInput
  none?: ItemWhereInput
}

export type StoreOrderByInput = {
  coordinates?: OrderByArg | null
  date?: OrderByArg | null
  id?: OrderByArg | null
  location?: OrderByArg | null
  storename?: OrderByArg | null
  amount?: OrderByArg | null
}

export type StoresOnItemsOrderByInput = {
  itemId?: OrderByArg | null
  storeId?: OrderByArg | null
}

export type ItemOrderByInput = {
  id?: OrderByArg | null
  item?: OrderByArg | null
  number?: OrderByArg | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
