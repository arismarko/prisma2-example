{
  "{\"sourceRoot\":\"/Users/arismarkogiannakis/Desktop/Demo/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/arismarkogiannakis/Desktop/Demo\",\"filename\":\"/Users/arismarkogiannakis/Desktop/Demo/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/arismarkogiannakis/Desktop/Demo\",\"plugins\":[],\"presets\":[]}:7.10.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/arismarkogiannakis/Desktop/Demo/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/arismarkogiannakis/Desktop/Demo",
      "filename": "/Users/arismarkogiannakis/Desktop/Demo/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/arismarkogiannakis/Desktop/Demo",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/arismarkogiannakis/Desktop/Demo/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/arismarkogiannakis/Desktop/Demo/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/arismarkogiannakis/Desktop/Demo/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "require('dotenv').config();\n\nvar express = require('express');\n\nvar bodyParser = require('body-parser');\n\nvar port = process.env.PORT || 3000;\nvar app = express();\n\nconst {\n  PrismaClient\n} = require('@prisma/client');\n\nconst prisma = new PrismaClient(); // parse application/json - VERY IMPORTANT\n\napp.use(bodyParser.json());\napp.post('/api/stores', async (req, res) => {\n  const {\n    body\n  } = req;\n  const dataToAdd = {\n    storename: body.storename,\n    location: body.location,\n    coordinates: body.coordinates,\n    date: new Date(Number(body.date)),\n    amount: body.queue,\n    Item: {\n      create: body.items\n    }\n  };\n  const store = await prisma.store.create({\n    data: dataToAdd\n  });\n  res.status(200).json(store);\n});\napp.get('/api/stores', (req, res) => {\n  const {\n    query: {\n      missing,\n      date\n    },\n    method\n  } = req;\n  const fulldate = new Date(Number(date));\n  prisma.store.findMany({\n    include: {\n      StoresOnItems: true,\n      Item: true\n    },\n    where: {\n      date: fulldate,\n      Item: {\n        some: {\n          item: missing\n        }\n      }\n    }\n  }).then(results => {\n    res.status(200).json({\n      results\n    });\n  });\n});\napp.put('/api/stores/:id', async (req, res) => {\n  const reqid = req.params.id;\n  const storename = req.body.storename;\n  console.log(reqid);\n  console.log(storename);\n  const updatedStore = await prisma.store.update({\n    data: {\n      storename: storename\n    },\n    where: {\n      id: Number(reqid)\n    }\n  });\n  res.status(200).json({\n    updatedStore\n  });\n});\napp.delete('/api/stores/:id', async (req, res) => {\n  const reqid = req.params.id;\n  const deletedStore = await prisma.store.delete({\n    where: {\n      id: Number(reqid)\n    }\n  });\n  res.status(200).json({\n    deletedStore\n  });\n});\napp.listen(port, function () {\n  console.log(`Example app listening on port ${process.env.PORT}!`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJjb25maWciLCJleHByZXNzIiwiYm9keVBhcnNlciIsInBvcnQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsImFwcCIsIlByaXNtYUNsaWVudCIsInByaXNtYSIsInVzZSIsImpzb24iLCJwb3N0IiwicmVxIiwicmVzIiwiYm9keSIsImRhdGFUb0FkZCIsInN0b3JlbmFtZSIsImxvY2F0aW9uIiwiY29vcmRpbmF0ZXMiLCJkYXRlIiwiRGF0ZSIsIk51bWJlciIsImFtb3VudCIsInF1ZXVlIiwiSXRlbSIsImNyZWF0ZSIsIml0ZW1zIiwic3RvcmUiLCJkYXRhIiwic3RhdHVzIiwiZ2V0IiwicXVlcnkiLCJtaXNzaW5nIiwibWV0aG9kIiwiZnVsbGRhdGUiLCJmaW5kTWFueSIsImluY2x1ZGUiLCJTdG9yZXNPbkl0ZW1zIiwid2hlcmUiLCJzb21lIiwiaXRlbSIsInRoZW4iLCJyZXN1bHRzIiwicHV0IiwicmVxaWQiLCJwYXJhbXMiLCJpZCIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVkU3RvcmUiLCJ1cGRhdGUiLCJkZWxldGUiLCJkZWxldGVkU3RvcmUiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCQyxNQUFsQjs7QUFFQSxJQUFJQyxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLElBQUlHLFVBQVUsR0FBR0gsT0FBTyxDQUFDLGFBQUQsQ0FBeEI7O0FBRUEsSUFBSUksSUFBSSxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBWixJQUFvQixJQUEvQjtBQUNBLElBQUlDLEdBQUcsR0FBR04sT0FBTyxFQUFqQjs7QUFFQSxNQUFNO0FBQUVPLEVBQUFBO0FBQUYsSUFBbUJULE9BQU8sQ0FBQyxnQkFBRCxDQUFoQzs7QUFDQSxNQUFNVSxNQUFNLEdBQUcsSUFBSUQsWUFBSixFQUFmLEMsQ0FFQTs7QUFDQUQsR0FBRyxDQUFDRyxH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SUFBaEIsQ0FBcUI7QUFBRXVDLElBQUFBO0FBQUYsR0FBckI7QUFDSCxDQWREO0FBZ0JBM0MsR0FBRyxDQUFDNkMsTUFBSixDQUFXLGlCQUFYLEVBQThCLE9BQU92QyxHQUFQLEVBQVlDLEdBQVosS0FBb0I7QUFFOUMsUUFBTStCLEtBQUssR0FBR2hDLEdBQUcsQ0FBQ2lDLE1BQUosQ0FBV0MsRUFBekI7QUFFQSxRQUFNTSxZQUFZLEdBQUksTUFBTTVDLE1BQU0sQ0FBQ21CLEtBQVAsQ0FBYXdCLE1BQWIsQ0FBb0I7QUFDNUNiLElBQUFBLEtBQUssRUFBRTtBQUFFUSxNQUFBQSxFQUFFLEVBQUV6QixNQUFNLENBQUN1QixLQUFEO0FBQVo7QUFEcUMsR0FBcEIsQ0FBNUI7QUFJQS9CLEVBQUFBLEdBQUcsQ0FBQ2dCLE1BQUosQ0FBVyxHQUFYLEVBQWdCbkIsSUFBaEIsQ0FBcUI7QUFBRTBDLElBQUFBO0FBQUYsR0FBckI7QUFDSCxDQVREO0FBWUE5QyxHQUFHLENBQUMrQyxNQUFKLENBQVduRCxJQUFYLEVBQWlCLFlBQVk7QUFDekI2QyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxpQ0FBZ0M3QyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBSyxHQUE5RDtBQUNILENBRkQiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FyaXNtYXJrb2dpYW5uYWtpcy9EZXNrdG9wL0RlbW8vIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnZG90ZW52JykuY29uZmlnKCk7XG5cbnZhciBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xuXG52YXIgcG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcbnZhciBhcHAgPSBleHByZXNzKCk7XG5cbmNvbnN0IHsgUHJpc21hQ2xpZW50IH0gPSByZXF1aXJlKCdAcHJpc21hL2NsaWVudCcpO1xuY29uc3QgcHJpc21hID0gbmV3IFByaXNtYUNsaWVudCgpO1xuXG4vLyBwYXJzZSBhcHBsaWNhdGlvbi9qc29uIC0gVkVSWSBJTVBPUlRBTlRcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXG5hcHAucG9zdCgnL2FwaS9zdG9yZXMnLCBhc3luYyAocmVxLCByZXMpID0+IHsgICAgXG4gICAgY29uc3QgeyBib2R5IH0gPSByZXE7XG5cbiAgICBjb25zdCBkYXRhVG9BZGQgPSB7XG4gICAgICAgIHN0b3JlbmFtZTogYm9keS5zdG9yZW5hbWUsXG4gICAgICAgIGxvY2F0aW9uOiBib2R5LmxvY2F0aW9uLFxuICAgICAgICBjb29yZGluYXRlczogYm9keS5jb29yZGluYXRlcyxcbiAgICAgICAgZGF0ZTogbmV3IERhdGUoTnVtYmVyKGJvZHkuZGF0ZSkpLFxuICAgICAgICBhbW91bnQ6IGJvZHkucXVldWUsXG4gICAgICAgIEl0ZW06IHtcbiAgICAgICAgICAgIGNyZWF0ZTogYm9keS5pdGVtcyxcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29uc3Qgc3RvcmUgPSAgIGF3YWl0IHByaXNtYS5zdG9yZS5jcmVhdGUoeyBkYXRhOiBkYXRhVG9BZGR9KTtcblxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHN0b3JlKTtcbn0pOyBcblxuXG5hcHAuZ2V0KCcvYXBpL3N0b3JlcycsIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgcXVlcnk6IHttaXNzaW5nLCBkYXRlIH0sXG4gICAgICAgIG1ldGhvZCxcbiAgICB9ID0gcmVxXG5cbiAgICBjb25zdCBmdWxsZGF0ZSA9IG5ldyBEYXRlKE51bWJlcihkYXRlKSk7XG5cbiAgICBwcmlzbWEuc3RvcmUuZmluZE1hbnkoe1xuICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICBTdG9yZXNPbkl0ZW1zOiB0cnVlLFxuICAgICAgICAgICAgSXRlbTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB3aGVyZTpcbiAgICAgICAge1xuICAgICAgICAgICAgZGF0ZTogZnVsbGRhdGUsXG4gICAgICAgICAgICBJdGVtOiB7XG4gICAgICAgICAgICAgICAgc29tZTpcbiAgICAgICAgICAgICAgICB7IGl0ZW06IG1pc3NpbmcgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkudGhlbihyZXN1bHRzID0+IHtcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyByZXN1bHRzIH0pO1xuICAgIH0pXG59KVxuXG5hcHAucHV0KCcvYXBpL3N0b3Jlcy86aWQnLCBhc3luYyAocmVxLCByZXMpID0+IHtcblxuICAgIGNvbnN0IHJlcWlkID0gcmVxLnBhcmFtcy5pZDtcbiAgICBjb25zdCBzdG9yZW5hbWU9ICByZXEuYm9keS5zdG9yZW5hbWU7XG5cbiAgICBjb25zb2xlLmxvZyhyZXFpZCk7XG4gICAgY29uc29sZS5sb2coc3RvcmVuYW1lKTtcblxuICAgIGNvbnN0IHVwZGF0ZWRTdG9yZSA9IGF3YWl0IHByaXNtYS5zdG9yZS51cGRhdGUoe1xuICAgICAgICBkYXRhOiB7IHN0b3JlbmFtZTogc3RvcmVuYW1lIH0sXG4gICAgICAgIHdoZXJlOiB7IGlkOiBOdW1iZXIocmVxaWQpIH0sXG4gICAgfSlcblxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgdXBkYXRlZFN0b3JlIH0pO1xufSlcblxuYXBwLmRlbGV0ZSgnL2FwaS9zdG9yZXMvOmlkJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG5cbiAgICBjb25zdCByZXFpZCA9IHJlcS5wYXJhbXMuaWQ7XG5cbiAgICBjb25zdCBkZWxldGVkU3RvcmUgID0gYXdhaXQgcHJpc21hLnN0b3JlLmRlbGV0ZSh7XG4gICAgICAgIHdoZXJlOiB7IGlkOiBOdW1iZXIocmVxaWQpIH0sXG4gICAgfSk7XG5cbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IGRlbGV0ZWRTdG9yZSB9KTtcbn0pXG5cblxuYXBwLmxpc3Rlbihwb3J0LCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc29sZS5sb2coYEV4YW1wbGUgYXBwIGxpc3RlbmluZyBvbiBwb3J0ICR7cHJvY2Vzcy5lbnYuUE9SVH0hYCk7XG59KTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "require",
        "config",
        "express",
        "bodyParser",
        "port",
        "process",
        "env",
        "PORT",
        "app",
        "PrismaClient",
        "prisma",
        "use",
        "json",
        "post",
        "req",
        "res",
        "body",
        "dataToAdd",
        "storename",
        "location",
        "coordinates",
        "date",
        "Date",
        "Number",
        "amount",
        "queue",
        "Item",
        "create",
        "items",
        "store",
        "data",
        "status",
        "get",
        "query",
        "missing",
        "method",
        "fulldate",
        "findMany",
        "include",
        "StoresOnItems",
        "where",
        "some",
        "item",
        "then",
        "results",
        "put",
        "reqid",
        "params",
        "id",
        "console",
        "log",
        "updatedStore",
        "update",
        "delete",
        "deletedStore",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/arismarkogiannakis/Desktop/Demo/",
      "sourcesContent": [
        "require('dotenv').config();\n\nvar express = require('express');\nvar bodyParser = require('body-parser');\n\nvar port = process.env.PORT || 3000;\nvar app = express();\n\nconst { PrismaClient } = require('@prisma/client');\nconst prisma = new PrismaClient();\n\n// parse application/json - VERY IMPORTANT\napp.use(bodyParser.json());\n\napp.post('/api/stores', async (req, res) => {    \n    const { body } = req;\n\n    const dataToAdd = {\n        storename: body.storename,\n        location: body.location,\n        coordinates: body.coordinates,\n        date: new Date(Number(body.date)),\n        amount: body.queue,\n        Item: {\n            create: body.items,\n        },\n    };\n\n    const store =   await prisma.store.create({ data: dataToAdd});\n\n    res.status(200).json(store);\n}); \n\n\napp.get('/api/stores', (req, res) => {\n    const {\n        query: {missing, date },\n        method,\n    } = req\n\n    const fulldate = new Date(Number(date));\n\n    prisma.store.findMany({\n        include: {\n            StoresOnItems: true,\n            Item: true\n        },\n        where:\n        {\n            date: fulldate,\n            Item: {\n                some:\n                { item: missing }\n            }\n        }\n    }).then(results => {\n        res.status(200).json({ results });\n    })\n})\n\napp.put('/api/stores/:id', async (req, res) => {\n\n    const reqid = req.params.id;\n    const storename=  req.body.storename;\n\n    console.log(reqid);\n    console.log(storename);\n\n    const updatedStore = await prisma.store.update({\n        data: { storename: storename },\n        where: { id: Number(reqid) },\n    })\n\n    res.status(200).json({ updatedStore });\n})\n\napp.delete('/api/stores/:id', async (req, res) => {\n\n    const reqid = req.params.id;\n\n    const deletedStore  = await prisma.store.delete({\n        where: { id: Number(reqid) },\n    });\n\n    res.status(200).json({ deletedStore });\n})\n\n\napp.listen(port, function () {\n    console.log(`Example app listening on port ${process.env.PORT}!`);\n});"
      ]
    },
    "sourceType": "module",
    "mtime": 1592955477944
  }
}